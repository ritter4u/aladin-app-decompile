// Vertex Shader. 

attribute vec4 Position;
attribute vec2 TextureCoord;
attribute vec2 TextureCoordNext;	//회전시 뒷면을 위해

uniform mat4 WorldMatrix;

varying vec2 TextureCoordOut;
varying float DarknessOut;
varying float TextureNum;

uniform float AniRatio;		//애니 비율
uniform int Flag;

//Flags
#define LEFT	0
#define RIGHT	1
#define UP		2
#define DOWN	3


float AT = 0.5;		//에니메이션 시간

/*
	< 비틀기 애니메이션에 대한 공식 >
	by Isaac Lee
	2011.09.20
	
	AniRatio : 외부에서 주어지는 애니메이션 진행 비율 (0~1)
	AT : 개별 가로축 비틀기 애니메이션이 완료되는 비율 (AniRatio에 대한 상대적 비율)
	hr : Mesh의 y값의 전체 height길이에 대한 비율 (0~1)
	ratio : 개별 가로축에 대한 회전 비율 (0~1)
	theta : 최종적으로 회전 시킬 radian값
	
	ratio = (AR - hr * (1 - AT)) / AT
	theta = ratio * PI 
*/
#define PI 3.141592

void main(void)
{
    
    TextureCoordOut = TextureCoord;
    TextureNum = 0.0;
    vec4 pos = Position;
    
    //Animation 계산을 한다.
    if(Flag == LEFT)
    {
	    //높이에 따른 계산을 해야 할듯하다. (pos의 y는 -1~+1)
	    float hr = 1.0-(Position.y + 1.0) / 2.0;
	    float ratio = (AniRatio - hr*(1.0 - AT) ) / AT;
	    if(ratio < 0.0) ratio = 0.0;
	    if(ratio > 1.0) ratio = 1.0;
	    float theta = ratio*PI;
	    if(ratio > 0.5)
	    {
	    	theta = (1.0-ratio)*PI;		//텍스쳐가 뒤집히는 현상을 방지하기 위해서 반이 넘었을때는 180도를 더 추가한다.
	    	TextureNum = 1.0;
	    }
	    	
	    float cos_t = cos(theta);
	    float sin_t = sin(theta);
	
		pos.x = pos.x * cos_t - pos.z * sin_t;
		pos.z = pos.x * sin_t + pos.z * cos_t;
	
	    //ratio로 그냥 명암 계산한다.
	    DarknessOut = abs(cos_t);
	}
    else if(Flag == RIGHT)
    {
	    //높이에 따른 계산을 해야 할듯하다. (pos의 y는 -1~+1)
	    float hr = 1.0-(Position.y + 1.0) / 2.0;
	    float ratio = (AniRatio - hr*(1.0 - AT) ) / AT;
	    if(ratio < 0.0) ratio = 0.0;
	    if(ratio > 1.0) ratio = 1.0;
	    ratio = 1.0-ratio;
	    float theta = ratio*PI;
	    if(ratio > 0.5)
	    {
	    	theta = (1.0-ratio)*PI;		//텍스쳐가 뒤집히는 현상을 방지하기 위해서 반이 넘었을때는 180도를 더 추가한다.
	    	TextureNum = 1.0;
	    }
	    
	    	
	    float cos_t = cos(theta);
	    float sin_t = sin(theta);
	
		pos.x = pos.x * cos_t - pos.z * sin_t;
		pos.z = pos.x * sin_t + pos.z * cos_t;

	    //ratio로 그냥 명암 계산한다.
	    DarknessOut = abs(cos_t);
	}
    else if(Flag == UP)
    {
	    //너비에 따른 계산을 해야 할듯하다. (pos의 y는 -1~+1)
	    float hr = 1.0-(Position.x + 1.0) / 2.0;
	    float ratio = (AniRatio - hr*(1.0 - AT) ) / AT;
	    if(ratio < 0.0) ratio = 0.0;
	    if(ratio > 1.0) ratio = 1.0;
	    float theta = ratio*PI;
	    if(ratio > 0.5)
	    {
	    	theta = (1.0-ratio)*PI;		//텍스쳐가 뒤집히는 현상을 방지하기 위해서 반이 넘었을때는 180도를 더 추가한다.
	    	TextureNum = 1.0;
	    }
	    
	    float cos_t = cos(theta);
	    float sin_t = sin(theta);
	
		pos.y = pos.y * cos_t - pos.z * sin_t;
		pos.z = pos.y * sin_t + pos.z * cos_t;
	
	    //ratio로 그냥 명암 계산한다.
	    DarknessOut = abs(cos_t);
	}
    else if(Flag == DOWN)
    {
	    //너비에 따른 계산을 해야 할듯하다. (pos의 y는 -1~+1)
	    float hr = 1.0-(Position.x + 1.0) / 2.0;
	    float ratio = (AniRatio - hr*(1.0 - AT) ) / AT;
	    if(ratio < 0.0) ratio = 0.0;
	    if(ratio > 1.0) ratio = 1.0;
	    float theta = ratio*PI;
	    if(ratio > 0.5)
	    {
	    	theta = (1.0-ratio)*PI;		//텍스쳐가 뒤집히는 현상을 방지하기 위해서 반이 넘었을때는 180도를 더 추가한다.
	    	TextureNum = 1.0;
	    }
	    
	    float cos_t = cos(theta);
	    float sin_t = sin(theta);
	
		pos.y = pos.y * cos_t - pos.z * sin_t;
		pos.z = pos.y * sin_t + pos.z * cos_t;
	
	    //ratio로 그냥 명암 계산한다.
	    DarknessOut = abs(cos_t);
	}

	//최종 계산    
    gl_Position =  WorldMatrix * pos;
}
