// Vertex Shader. 

attribute vec4 Position;
attribute vec2 TextureCoord;
attribute vec2 TextureCoordNext;	//회전시 뒷면을 위해

uniform mat4 WorldMatrix;
uniform mat4 RotMatrix;	//선행 회전

varying vec2 TextureCoordOut;
varying float DarknessOut;

uniform float AniRatio;		//애니 비율
uniform float StartX;		//시작위치
uniform int Flag;
uniform float ActualWidth;

//Flags
#define ROLLING	0		//두루말이
#define CURLING	1		//페이지컬

#define WIDTH 2.0

float AW = 0.7;		//접을 가로 크기 (총 가로크기WIDTH)
float AT = AW / ActualWidth * 0.5;	//비율

/*
	두루말이 말기
	by Isaac Lee
	2011.10.4
	
	AniRatio = Animation 비율 0~1
	ActualWidth = 실제 가로 폭 ( 기본값은 2이지만 회전을 함에따라 회전후 꼭지점을 이은 가로 크기는 더 커질 수 있다)
	AW = 가로크기 2.0 에 대해 종이를 접을 크기
	AT = 실제 가로 크기의 반으로 접을 크기 AW에 대한 비율이다.  
	sx = 시작 p위치
	nx = 시작 pos.x 위치
	r = 
	
*/
#define PI 3.141592

void main(void)
{
    
    TextureCoordOut = TextureCoord;
    vec4 pos = RotMatrix * Position;
    DarknessOut = 1.0;
    
    //Animation 계산을 한다.
   
    if(Flag == ROLLING)
    {
	 	float p = (1.0-AniRatio - AT) / (1.0 - AT);
	 	float sx = ActualWidth * (p - 0.5);  	//다음을 정리 : float sx = ActualWidth * p - ActualWidth * 0.5;

	 	float nx = pos.x - sx;
	 	float r = nx / AW;
	 	
	 	//float ac = asin( 4.0 * r ) * 2.0 / PI; 
	 	
	 	if(r > 0.0 && r < 2.0)
	 	{
		 	float sin_r = sin(PI * r);
	 		pos.x = AW * 0.25 * sin_r + sx;
	 		pos.z = AW * sin(0.5 * PI * r) * 0.5;

	 		DarknessOut = (1.0 - abs(sin_r)) * 0.8 + 0.4;
	 		if(DarknessOut > 1.0)
	 			DarknessOut = 1.0;
	 	}
 		if(r > 2.0)	// 화면에 안보이는 처리
 		{
 			pos.x = sx;
 			pos.z = AW * 0.25;
 		}
	}
	
	//펴기 
    if(Flag == CURLING)
    {
	 	float p = (1.0-AniRatio - AT) / (1.0 - AT);
	 	float sx = ActualWidth * (p - 0.5);  	//다음을 정리 : float sx = ActualWidth * p - ActualWidth * 0.5;

	 	float nx = pos.x - sx;
	 	float r = nx / AW;
	 	
	 	if(r > 0.0 && r < 1.0)
	 	{
		 	float sin_r = sin(PI * r);
	 		pos.x = AW * 0.25 * sin_r  + sx;
	 		pos.z = AW * sin(0.5 * PI * r)*2.0;
	 		DarknessOut = (1.0 - abs(sin_r)) * 0.8 + 0.4;
	 		if(DarknessOut > 1.0)
	 			DarknessOut = 1.0;
	 	}
 		if(r > 1.0)	
 		{
 			pos.x = sx + sx - pos.x + AW;
 			pos.z = AW * 2.0;
 		}
	}
	
		//최적화 테스트
    if(Flag == 5)
    {
	 	float r = (pos.x - StartX) / AW;
	 		 	
	 	if(r > 0.0 && r < 1.0)
	 	{
		 	float sin_r = sin(PI * r);
	 		pos.x = AW * 0.25 * sin_r + StartX;
	 		pos.z = AW * sin(0.5 * PI * r) * 2.0;
	 		DarknessOut = (1.0 - abs(sin_r)) * 0.6 + 0.4;
	 	}
 		if(r > 1.0)	
 		{
 			pos.x = StartX + StartX - pos.x + AW;
 			pos.z = 2.0 * AW;
 		}
	}

	//최종 계산    
    gl_Position =  WorldMatrix * pos;
}
