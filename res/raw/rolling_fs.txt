// FragmentShader
precision mediump float; 

varying mediump vec2 TextureCoordOut;
varying mediump float DarknessOut;

uniform sampler2D Sampler;
uniform lowp int BackFace;	//뒷면인지
uniform lowp int UseColor;		//컬러사용

void main(void)
{
	if(BackFace == 1)
	{
		gl_FragColor = vec4(DarknessOut, DarknessOut, DarknessOut, 1.0);
	}
	else
	{
		if(DarknessOut == 1.0)
		{
			if(UseColor == 1)
			{
				//gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);
				gl_FragColor = texture2D(Sampler, TextureCoordOut);
				gl_FragColor.r += 0.5;
				gl_FragColor.g += 0.5;
				gl_FragColor.b += 0.5;
				if(gl_FragColor.r > 1.0) gl_FragColor.r = 1.0;
				if(gl_FragColor.g > 1.0) gl_FragColor.g = 1.0;
				if(gl_FragColor.b > 1.0) gl_FragColor.b = 1.0;
			}
			else
				gl_FragColor = texture2D(Sampler, TextureCoordOut);
		}
		else
		{
			if(UseColor == 1)
			{
				//gl_FragColor = vec4(DarknessOut, DarknessOut, DarknessOut, 1.0);
				gl_FragColor = texture2D(Sampler, TextureCoordOut);
				gl_FragColor.r += 0.5;
				gl_FragColor.g += 0.5;
				gl_FragColor.b += 0.5;
				if(gl_FragColor.r > 1.0) gl_FragColor.r = 1.0;
				if(gl_FragColor.g > 1.0) gl_FragColor.g = 1.0;
				if(gl_FragColor.b > 1.0) gl_FragColor.b = 1.0;

				gl_FragColor.r *= DarknessOut;
				gl_FragColor.g *= DarknessOut;
				gl_FragColor.b *= DarknessOut;
				
			}
			else
			{
				gl_FragColor = texture2D(Sampler, TextureCoordOut);
				gl_FragColor.r *= DarknessOut;
				gl_FragColor.g *= DarknessOut;
				gl_FragColor.b *= DarknessOut;
			}
		}
	}
	
	//테스트를 위한 코드
	/*
	gl_FragColor.r = 1.0 - gl_FragColor.r;
	gl_FragColor.g = 1.0 - gl_FragColor.g;
	gl_FragColor.b = 1.0 - gl_FragColor.b;
	gl_FragColor.r += 0.3;
	gl_FragColor.g += 0.3;
	gl_FragColor.b += 0.3;
	if(gl_FragColor.r > 1.0) gl_FragColor.r = 1.0;
	if(gl_FragColor.g > 1.0) gl_FragColor.g = 1.0;
	if(gl_FragColor.b > 1.0) gl_FragColor.b = 1.0;*/
}
